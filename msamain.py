print ('GO!!')
import datetime
import string

from msaFunctions import *
import msaTemplates as msat

import pandas as pd


"""
File name format was:
faceID_1_name_Diversity-Wall_month_1_hr_7_min_15_.png
now
faceID_1_name_Level_10_Appt_A_Win_1_month_6_hr_7_min_0_.png
"""
'''
['faceID', 0
 '9',      1
 'Level',  2
 '10',     3
 'Appt',   4 
 'G',      5
 'Win',    6
 '1',      7
 'month',  8
 '6',      9
 'hr',    10
 '9',     11
 'min',   12
 '45',    13
 '.png']  14
'''

months = [  'January'  ,            'February' ,            'March'    ,
            'April'    ,            'May'      ,            'June'     ,
            'July'     ,            'August'   ,            'September',
            'October'  ,            'November' ,            'December' ]

#############################################################################

#Action starts here:
#path='P:\\13\\s1309002.yel\\Admin\\04.0 Authorities\\4.01 Town Planning\\04_SEPP 65 and Residential Flat Design Code\\20140314 S1DA'
path='C:\\Users\\bdoherty\\Desktop\\20140314 S1DA'
print(path)
print

numberOfHoursToPass = 2
numberOfImagesPerHour = 4      
bracketStartTime =  9
BracketEndTime   = 15  
print "numberOfHoursToPass", numberOfHoursToPass
print "numberOfImagesPerHour", numberOfImagesPerHour
print "bracketStartTime", bracketStartTime
print "BracketEndTime", BracketEndTime
print

#gets, formats into objects and sorts the filenames
saImages = getFileList(path, ('minute','hour','appartment_window',
                              'appartment','building_level','month'))
                                                          
windowAreas = {
    'C-6-4-1':36.6095,'C-6-5-1':26.255,'C-11-1-1':5.38377,'C-11-2-1':23.305,'C-10-2-1':23.305,
    'C-10-1-1':10.2542,'C-9-1-1':20.5084,'C-9-2-1':11.6525,'C-8-2-1':11.6525,'C-8-1-1':20.5084,
    'C-7-2-1':23.305,'C-7-1-1':10.2542,'C-6-1-1':20.5084,'C-6-2-1':23.305,'C-6-3-1':23.128,
    'C-7-3-1':10.233,'C-7-4-1':5.1435,'C-11-4-1':16.756,'C-11-3-1':16.815,'C-10-3-1':16.815,
    'C-10-4-1':16.756,'C-9-4-1':16.756,'C-9-3-1':16.815,'C-8-3-1':16.815,'C-8-4-1':16.756,
    'B-4-1-1':15.1303,'B-5-1-1':15.1303,'B-6-1-1':7.59627,'B-7-1-1':7.59627,'B-8-1-1':7.59627,
    'B-9-1-1':7.59627,'B-2-5-2':4.55774,'B-3-5-3':10.325,'B-2-5-3':10.325,'B-3-5-2':4.55774,
    'B-4-4-2':10.325,'B-5-5-2':10.325,'B-9-4-3':4.95599,'B-8-4-3':4.95599,'B-7-4-3':4.95599,
    'B-6-4-3':4.95599,'B-6-2-2':13.8303,'B-7-2-2':13.8303,'B-8-2-2':13.8303,'B-6-2-1':15.401,
    'B-7-2-1':15.401,'B-8-2-1':15.401,'B-9-2-1':9.76115,'B-2-4-3':4.49854,'B-3-4-3':4.49854,
    'B-2-3-3':8.99889,'B-3-2-3':8.99889,'B-9-3-1':6.00919,'B-8-3-1':6.00919,'B-7-3-1':6.00919,
    'B-6-3-1':6.00919,'B-2-4-4':11.8,'B-2-3-4':5.9,'B-3-4-4':11.8,'B-3-2-4':5.9,'B-9-2-2':13.8996,
    'B-9-3-2':13.8995,'B-8-3-2':13.8995,'B-7-3-2':13.8995,'B-6-3-2':13.8995,'B-5-2-1':17.9507,
    'B-5-4-1':17.9507,'B-10-3-2':11.3405,'B-10-2-1':19.7057,'B-10-3-1':20.9477,'B-11-1-2':0.643985,
    'B-11-1-1':8.95805,'B-11-1-3':14.8975,'B-2-4-1':10.4843,'B-2-4-2':6.6375,'B-3-4-1':10.4843,
    'B-3-4-2':6.6375,'B-4-2-2':5.9,'B-4-2-1':10.915,'B-3-3-2':2.35445,'B-3-3-1':4.57692,
    'B-4-3-2':10.915,'B-4-3-1':11.8,'B-5-3-2':11.0625,'B-5-3-1':9.14497,'B-6-4-1':4.95603,
    'B-6-4-2':5.54596,'B-7-4-1':4.95603,'B-7-4-2':5.54596,'B-8-4-1':4.95603,'B-8-4-2':5.54596,
    'B-9-4-1':4.95603,'B-9-4-2':5.54596,'B-11-2-2':11.6525,'B-11-2-1':14.8975,'B-2-3-2':6.40152,
    'B-2-3-1':9.15681,'B-2-1-1':13.4225,'B-2-2-1':11.7882,'B-3-1-1':13.4225,'B-3-2-1':11.7882,
    'B-10-1-1':4.425,'B-4-4-1':8.55499,'B-5-5-1':8.55499,'B-2-5-1':15.93,'B-3-5-1':15.93,
    'A-2-4-2':18.585,'A-3-4-2':18.585,'A-4-4-2':18.585,'A-5-4-2':18.585,'A-6-3-2':18.585,
    'A-6-3-1':11.8366,'A-5-4-1':11.8366,'A-4-4-1':11.8366,'A-3-4-1':11.8366,'A-2-4-1':11.8366,
    'A-7-1-1':10.5315,'A-6-1-1':11.3929,'A-2-2-2':7.3763,'A-3-2-2':7.3763,'A-4-2-2':7.3763,
    'A-5-2-2':7.3763,'A-6-7-1':11.7389,'A-2-7-1':11.623,'A-3-7-1':11.623,'A-4-7-1':11.623,
    'A-5-7-1':11.623,'A-7-4-1':13.9594,'A-5-5-1':7.39269,'A-5-5-3':6.32775,'A-5-5-2':6.3204,
    'A-2-5-1':7.39269,'A-2-5-3':6.32775,'A-2-5-2':6.3204,'A-3-5-1':7.39269,'A-3-5-3':6.32775,
    'A-3-5-2':6.3204,'A-4-5-1':7.39269,'A-4-5-3':6.32775,'A-4-5-2':6.3204,'A-6-4-1':7.39269,
    'A-6-4-3':6.32775,'A-6-4-2':6.3204,'A-2-1-1':8.55501,'A-2-2-1':5.59025,'A-2-3-1':11.8531,
    'A-3-1-1':8.55501,'A-4-1-1':8.55501,'A-5-1-1':8.55501,'A-3-2-1':5.59025,'A-4-2-1':5.59025,
    'A-5-2-1':5.59025,'A-3-3-1':11.8531,'A-4-3-1':11.8531,'A-5-3-1':11.8531,'A-6-2-1':11.8531,
    'A-2-6-1':5.78937,'A-2-8-1':5.87053,'A-2-9-1':8.55501,'A-3-8-1':11.741,'A-4-8-1':11.741,
    'A-5-8-1':11.741,'A-5-9-1':8.55501,'A-4-9-1':8.55501,'A-3-9-1':8.55501,'A-3-6-1':11.5788,
    'A-4-6-1':11.5788,'A-5-6-1':11.5788,'A-6-5-1':11.6352,'A-6-6-1':11.6233,'A-7-2-1':5.42799,
    'A-7-3-1':10.2365,'C-7-5-1':22.656,'C-8-5-1':22.656,'C-9-5-1':22.656,'C-10-5-1':22.656,
    'C-11-5-1':22.656,'C-11-6-1':10.2513,'C-9-6-1':10.2513,'C-8-6-1':10.2513,
    'C-7-6-1':10.2513,'C-6-7-1':10.2513,'C-6-6-1':22.656,'C-10-6-1':20.5025
    }    
                             
for i in saImages:
    i.totalArea = windowAreas[i.name]
    
dictsOfImages = []
for i in saImages:
    dictsOfImages.append(i.__dict__)

imageDF = pd.DataFrame(dictsOfImages)
#split the name up for sorting
imageDF["building"] = imageDF["name"].apply(lambda x: x.split("-")[0])
imageDF["level"]    = imageDF["name"].apply(lambda x: x.split("-")[1])
imageDF["appt"]     = imageDF["name"].apply(lambda x: x.split("-")[2])
imageDF["window"]   = imageDF["name"].apply(lambda x: x.split("-")[3])
# make a column with area exposed
imageDF["areaExposed"]   = imageDF["totalArea"] * imageDF["pcWhite"] #imageDF["areaExposed"]   = imageDF.apply(lambda x: x["totalArea"] * x["pcWhite"], axis=1) # is equivalent

imageDF.query('a > b')
